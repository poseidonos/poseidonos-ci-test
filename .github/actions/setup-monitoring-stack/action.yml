name: "Setup Monitoring"
Description: "This action deploy monitoring stacks for poseidonos"
inputs:
  POS_WORKING_DIR:
    required: true
  GA_COMMIT_HASH:
    required: true
  GA_WORKFLOW:
    required: true
  GA_DETAIL:
    required: true
    
  POS_EXPORTER_PORT:
    required: true

  AMP_REMOTE_WRITE_URL:
    required: true
  AMP_SIGV4_REGION:
    required: true
  AMP_SIGV4_ACCESS_KEY:
    required: true
  AMP_SIGV4_SECRET_KEY:
    required: true
  
  LOGSTASH_PORT:									      
    required: true
  
  OS_DOMAIN_ENDPOINT:
    required: true
  OS_REGION:
    required: true
  
runs:
  using: "composite"
  steps:
    - name: "Deploying Prometheus"
      shell: bash
      env:
        PROMETHEUS_CONF_PATH: ${{ inputs.POS_WORKING_DIR }}/config/prometheus.yml
        
        POS_EXPORTER_PORT: ${{ inputs.POS_EXPORTER_PORT }}

        GA_COMMIT_HASH: ${{ inputs.GA_COMMIT_HASH }}
        GA_WORKFLOW: ${{ inputs.GA_WORKFLOW }}
        GA_DETAIL: ${{ inputs.GA_DETAIL }}

        AMP_REMOTE_WRITE_URL: ${{ inputs.AMP_REMOTE_WRITE_URL }}
        AMP_SIGV4_REGION: ${{ inputs.AMP_SIGV4_REGION }}
        AMP_SIGV4_ACCESS_KEY: ${{ inputs.AMP_SIGV4_ACCESS_KEY }}
        AMP_SIGV4_SECRET_KEY: ${{ inputs.AMP_SIGV4_SECRET_KEY }}

      run: |
        # Set Prometheus Config
        cat > ${PROMETHEUS_CONF_PATH} <<-EOF
        scrape_configs:
          - job_name: "Github-Action"
            scrape_interval: 1s
            static_configs:
              - targets: ["$(hostname -i):${POS_EXPORTER_PORT}"]
                labels:
                  ga_commit_hash: "${GA_COMMIT_HASH}"
                  ga_workflow: "${GA_WORKFLOW}"
                  ga_detail: "${GA_DETAIL}"
        remote_write:
          - url: ${AMP_REMOTE_WRITE_URL}
            sigv4:
              region: ${AMP_SIGV4_REGION}
              access_key: ${AMP_SIGV4_ACCESS_KEY}
              secret_key: ${AMP_SIGV4_SECRET_KEY}
        EOF
        
        # Run Prometheus
        docker run \
               -d \
               -p 9090:9090 \
               -v ${PROMETHEUS_CONF_PATH}:/etc/prometheus/prometheus.yml \
               prom/prometheus

    - name: "Deploying Logstash"
      shell: bash
      env:
        LOGSTASH_CONF_PATH: ${{ inputs.POS_WORKING_DIR }}/config/filebeat.yml
        
        LOGSTASH_PORT: ${{ inputs.LOGSTASH_PORT }}
        
        OS_DOMAIN_ENDPOINT: ${{ inputs.OS_DOMAIN_ENDPOINT }}
        OS_REGION: ${{ inputs.OS_REGION }}
        
      run: |
        # Set Logstash Config
        cat > ${LOGSTASH_CONF_PATH} <<-EOF
        input {
          beats {
        	  port => 5045
        	  type => "POS-Log-from-Github-Action"
          }
        }
        
        filter {
          grok{
        	  match => {
              "message" => "\[%{TIMESTAMP_ISO8601:[@metadata][time]}\]\[%{INT:process_id}\]\[%{INT:thread_id}\]\[%{INT:pos_id}\]\[%{INT:event_id}\]\[\s*%{GREEDYDATA:level}\s*\]\s*%{GREEDYDATA:inner_message}"
            }
            add_field => {
              "ga_commit_hash" => "${GA_COMMIT_HASH}"
              "ga_workflow" => "${GA_WORKFLOW}"
              "ga_detail" => "${GA_DETAIL}"
            }
          }
          
          if "_grokparsefailure" in [tag] {
            # Parsing fails, log is in "JSON (Structured)" format
            json { source => "message" }
          }
          
          date{
            match => [ "[@metadata][time]", "yyyy-MM-dd HH:mm:ss.SSSSSSSSS" ]
            timezone => "UTC"
          }
        }
        
        output {
          opensearch {
            hosts  => ["${OS_DOMAIN_ENDPOINT}:443"]
            auth_type => {
              type => 'aws_iam'
              aws_access_key_id => '${AMP_SIGV4_ACCESS_KEY}'
              aws_secret_access_key => '${AMP_SIGV4_SECRET_KEY}'
              region => '${OS_REGION}'
            }
            index => "github-action-pos-log-$(echo ${GA_COMMIT_HASH} | tr '[:upper:]' '[:lower:]')"
          }
        }
        EOF
        
        # Run Logstash
        docker run \
               -d \
               -p ${LOGSTASH_PORT}:${LOGSTASH_PORT} \
               -v ${LOGSTASH_CONF_PATH}:/usr/share/logstash/pipeline/logstash.conf \
               opensearchproject/logstash-oss-with-opensearch-output-plugin
    
    - name: "Deploying Filebeat"
      shell: bash
      env:
        FILEBEAT_CONF_PATH: ${{ inputs.POS_WORKING_DIR }}/config/logstash.conf
      run: |
        # Set Filebeat Config
        cat > ${FILEBEAT_CONF_PATH} <<-EOF
        filebeat.inputs:
          - type: log
        	enabled: true
        	paths:
        	  - /mnt/log/pos/pos.log
        output.logstash:
          hosts: ["$(hostname -i):${LOGSTASH_PORT}"]
        EOF
        
        # Run Filebeat
        docker run \
               -d \
               -v ${FILEBEAT_CONF_PATH}:/usr/share/filebeat/filebeat.yml \
               -v /var/log:/mnt/log \
               docker.elastic.co/beats/filebeat-oss:8.2.0 -e --strict.perms=false
